# VERSATIL SDLC Framework - Enterprise Docker Configuration
# Marcus-Backend Container Orchestration

version: '3.8'

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: versatil-app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - database
      - redis
      - monitoring
    networks:
      - versatil-network
    volumes:
      - app-logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: versatil-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-versatil}
      - POSTGRES_USER=${DB_USER:-versatil_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - versatil-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-versatil_user} -d ${DB_NAME:-versatil}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: versatil-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - versatil-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: versatil-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - versatil-network

  # Monitoring & Logging
  monitoring:
    image: prom/prometheus:latest
    container_name: versatil-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - versatil-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: versatil-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - monitoring
    networks:
      - versatil-network

  # Testing Services
  maria-qa-tests:
    build:
      context: .
      dockerfile: Dockerfile.testing
    container_name: versatil-testing
    restart: "no"
    environment:
      - NODE_ENV=test
      - TEST_DATABASE_URL=${TEST_DATABASE_URL}
    volumes:
      - ./tests:/app/tests
      - ./reports:/app/reports
      - maria-qa-results:/app/test-results
    networks:
      - versatil-network
    profiles:
      - testing

  # Chrome for E2E Testing
  chrome-mcp:
    image: browserless/chrome:latest
    container_name: versatil-chrome
    restart: unless-stopped
    ports:
      - "3333:3000"
    environment:
      - CONNECTION_TIMEOUT=60000
      - MAX_CONCURRENT_SESSIONS=5
      - KEEP_ALIVE=true
    shm_size: 2gb
    networks:
      - versatil-network
    profiles:
      - testing

  # Message Queue (Optional)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: versatil-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-versatil}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - versatil-network
    profiles:
      - queue

  # Elasticsearch (for logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: versatil-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - versatil-network
    profiles:
      - logging

  # Kibana (for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: versatil-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - versatil-network
    profiles:
      - logging

  # CI/CD Agent
  jenkins:
    image: jenkins/jenkins:lts
    container_name: versatil-jenkins
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - JENKINS_OPTS=--httpPort=8080
    networks:
      - versatil-network
    profiles:
      - cicd

# Networks
networks:
  versatil-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app-logs:
    driver: local
  nginx-logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  maria-qa-results:
    driver: local
  rabbitmq_data:
    driver: local
  elasticsearch_data:
    driver: local
  jenkins_data:
    driver: local

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up